# -*- coding: utf-8 -*-
"""blurry_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ca0Fgy4LTt_wKz7FVhIXQTlspNFh2aUX
"""

from google.colab import drive
drive.mount('/content/drive/')
images_path = "/content/drive/MyDrive/final_csc4080/images/train"

"""# Blurry Algorithm
- using one images as an example
- 3 method: SMD, SMD2, energy gradient
- SMD is the simplest one
- the time complexity of SMD2 and energy gradient are almost the same
- input is one cv2 bgr image, output will be the corresponding value of cv2 gray scale image

- how to measure the blurry
"""

import numpy as np
import cv2

img = cv2.imread(images_path + "/5e59c7fdb16c4228_26124.jpg")

def getdxdy(array):
  size = array.shape
  brakets = (np.zeros(size[0]))
  temp_x_1 = np.c_[array,brakets]
  temp_x_2 = np.c_[brakets, array]
  brakets = np.zeros(size[1])
  temp_y_1 = np.r_[array, [brakets]]
  temp_y_2 = np.r_[[brakets], array]
  returnvalue1 = np.abs(temp_x_1-temp_x_2)
  returnvalue2 = np.abs(temp_y_1-temp_y_2)
  return returnvalue1[0:size[0], 0:size[1]] , returnvalue2[:size[0], :size[1]]

def get_gray_nparray(image):
  gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
  gray = np.asarray(gray)
  return gray

def SMD(image):
  gray = get_gray_nparray(image)
  gdx, gdy = getdxdy(gray)
  returnvalue = (gdx+gdy).mean()
  return returnvalue

def SMD2(image):
  gray = get_gray_nparray(image)
  gdx, gdy = getdxdy(gray)
  returnvalue = (gdx*gdy).mean()
  return returnvalue

def energy_gradient(image):
  gray = get_gray_nparray(image)
  gdx, gdy = getdxdy(gray)
  returnvalue = (gdx*gdx + gdy*gdy).mean()
  return returnvalue
 